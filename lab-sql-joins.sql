USE sakila;

-- List the number of films per category.

SELECT c.name AS category_name, COUNT(f.film_id) AS number_of_films
FROM film AS f
JOIN film_category AS fc ON f.film_id = fc.film_id
JOIN category AS c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY number_of_films DESC;

-- Retrieve the store ID, city, and country for each store.

SELECT s.store_id, c1.city, c2.country
FROM store AS s
JOIN address AS a ON s.address_id = a.address_id
JOIN city AS c1 ON a.city_id = c1.city_id
JOIN country AS c2 ON c1.country_id = c2.country_id;

-- Calculate the total revenue generated by each store in dollars.

SELECT c.store_id, SUM(p.amount) AS total_revenue
FROM customer AS c
JOIN payment AS p ON c.customer_id = p.customer_id
GROUP BY c.store_id
ORDER BY total_revenue DESC;

-- Determine the average running time of films for each category.

SELECT c.name AS category_name, AVG(f.length) AS avg_running_time
FROM film AS f
JOIN film_category AS fc ON f.film_id = fc.film_id
JOIN category AS c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time DESC;


-- BONUS:
-- Identify the film categories with the longest average running time.

SELECT c.name AS category_name, AVG(f.length) AS avg_running_time
FROM film AS f
JOIN film_category AS fc ON f.film_id = fc.film_id
JOIN category AS c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time DESC
LIMIT 5;

-- Display the top 10 most frequently rented movies in descending order.

SELECT f.title AS film_title, COUNT(r.rental_id) AS times_rented
FROM film AS f
JOIN inventory AS i ON f.film_id = i.film_id
JOIN rental AS r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY times_rented DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title AS film_title, i.store_id
FROM film AS f
JOIN inventory AS i ON f.film_id = i.film_id
WHERE f.title = 'Academy Dinosaur' AND store_id = 1; -- 4 copies of the film are available in the inventory of Store 1

/* Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available'.
Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL.*/

SELECT DISTINCT(f.title) AS film_title,
CASE
WHEN i.inventory_id IS NOT NULL THEN 'Available'
ELSE 'NOT available'
END AS availability
FROM film AS f
LEFT JOIN inventory AS i ON f.film_id = i.film_id;